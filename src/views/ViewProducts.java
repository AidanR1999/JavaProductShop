/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import javax.swing.DefaultListModel;
import models.Customer;
import models.DBManager;
import models.Order;
import models.OrderLine;
import models.Product;

/**
 *
 * @author Aidan
 */
public class ViewProducts extends javax.swing.JFrame {

    //logged in customer
    private static Customer customer;
    
    //all products
    private HashMap<Integer, Product> products;
    
    //current order
    private static Order currentOrder;
    
    /**
     * Creates new form ViewProducts
     */
    public ViewProducts(Customer c) {
        this.customer = c;
        
        //load products into hashmap
        DBManager db = new DBManager();
        products = db.loadProducts();
        
        initComponents();
        this.setLocationRelativeTo(null);
        
        //if customer is no registered, disable items related to making a purchase
        if(!customer.isIsRegistered())
        {
            cmdAddToBasket.setEnabled(false);
            cmdViewBasket.setEnabled(false);
            cmbQuantity.setEnabled(false);
        }
        //customer is logged in
        else
        {
            //get the last order
            currentOrder = customer.findLatestOrder();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cmdViewBasket = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstProductTypes = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstProducts = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmdAddToBasket = new javax.swing.JButton();
        cmbQuantity = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        lblErrorMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cmdBack.setText("Back");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        jLabel1.setText("View Products");

        cmdViewBasket.setText("View Basket");
        cmdViewBasket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewBasketActionPerformed(evt);
            }
        });

        lstProductTypes.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Clothing", "Footwear" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstProductTypes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstProductTypesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstProductTypes);

        jScrollPane2.setViewportView(lstProducts);

        jLabel2.setText("Categories");

        jLabel3.setText("Products");

        cmdAddToBasket.setText("Add to basket");
        cmdAddToBasket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddToBasketActionPerformed(evt);
            }
        });

        cmbQuantity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));

        jLabel4.setText("Quantity:");

        lblErrorMessage.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmdBack)
                        .addGap(76, 76, 76)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmdViewBasket)
                        .addGap(19, 19, 19))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(53, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblErrorMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdAddToBasket)
                        .addGap(29, 29, 29))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdBack)
                    .addComponent(jLabel1)
                    .addComponent(cmdViewBasket))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmdAddToBasket)
                            .addComponent(cmbQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblErrorMessage)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //reutrn to previous page
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        //if customer is not registered go to main menu page
        if(!customer.isIsRegistered())
        {
            MainMenu mm = new MainMenu();
            this.dispose();
            mm.setVisible(true);
        }
        //if customer is registered go to customer home page
        else
        {
            CustomerHome ch = new CustomerHome(customer);
            this.dispose();
            ch.setVisible(true);
        }
    }//GEN-LAST:event_cmdBackActionPerformed

    //when user selects a product type, reload the products
    private void lstProductTypesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstProductTypesValueChanged
        //get selected product type
        String typeSelected = lstProductTypes.getSelectedValue();
        DefaultListModel productList = new DefaultListModel();
        
        //for every product in the hashmap
        for(Map.Entry<Integer, Product> productEntry : products.entrySet())
        {
            //store product in the current iteration
            Product product = productEntry.getValue();
            
            //if product is of product type
            if(product.getClass().getName().equals("models." + typeSelected))
            {
                //add product to list
                productList.addElement(product);
            }
        }
        
        //display list
        lstProducts.setModel(productList);
    }//GEN-LAST:event_lstProductTypesValueChanged

    //adds product seletected to the basket
    private void cmdAddToBasketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddToBasketActionPerformed
        //if product is selected
        if(lstProducts.getSelectedIndex() != -1)
        {
            //store product selected
            Object productObject = (Object) lstProducts.getSelectedValue();
            Product product = (Product) productObject;
            
            //get quantity selected from combo box
            int quantity = Integer.parseInt(String.valueOf(cmbQuantity.getSelectedItem()));
            
            //store orderline
            Optional<OrderLine> optionalOrderline = currentOrder.checkIfProductIsInBasket(product.getProductID());
            
            //if orderline doesnt exists
            if(!optionalOrderline.isPresent())
            {
                //check if stock level is there is sufficient stock
                if(product.getStockLevel() >= quantity)
                {
                    //create new orderline and add orderline to database
                    OrderLine orderLine = new OrderLine(currentOrder.generateUniqueOrderLineId(), product, quantity);
                    currentOrder.addOrderLine(orderLine);
                    
                    //reset quantity combo box
                    cmbQuantity.setSelectedIndex(0);
                    
                    //show message
                    lblErrorMessage.setText("Product added to basket!");
                }
                //insufficient stock
                else
                {
                    lblErrorMessage.setText("Error: Product not in stock");
                } 
            }
            //if orderline exists
            else
            {
                //store the orderlineS
                OrderLine orderLine = optionalOrderline.get();
                
                //if sufficient stock
                if(product.getStockLevel() - quantity >= orderLine.getQuantity())
                {
                    //update quantity and line total
                    orderLine.setQuantity(orderLine.getQuantity() + quantity);
                    orderLine.setLineTotal(orderLine.getLineTotal() + product.getPrice() * quantity);
                    
                    //update orderline in database
                    DBManager db = new DBManager();
                    db.editOrderLine(orderLine);
                    
                    //update order total
                    currentOrder.calculateOrderTotal();
                    
                    //reset combo box
                    cmbQuantity.setSelectedIndex(0);
                    
                    //show message
                    lblErrorMessage.setText("Product added to basket!");
                }
                //insufficient stock
                else
                {
                    lblErrorMessage.setText("Error: Product not in stock");
                }
            }
        }
        //product not selected
        else
        {
            lblErrorMessage.setText("Error: Select a product");
        }
    }//GEN-LAST:event_cmdAddToBasketActionPerformed

    //load view basket page
    private void cmdViewBasketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewBasketActionPerformed
        ViewBasket vb = new ViewBasket(customer);
        this.dispose();
        vb.setVisible(true);
    }//GEN-LAST:event_cmdViewBasketActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewProducts(customer).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbQuantity;
    private javax.swing.JButton cmdAddToBasket;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdViewBasket;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblErrorMessage;
    private javax.swing.JList<String> lstProductTypes;
    private javax.swing.JList<String> lstProducts;
    // End of variables declaration//GEN-END:variables
}
